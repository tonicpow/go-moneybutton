package api

import (
	"context"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"strings"

	"github.com/tonicpow/go-moneybutton/config"
)

// RefreshTokenResponse is used to get a refresh token for getting user information from the moneybutton API
type RefreshTokenResponse struct {
	AccessToken  string `json:"access_token"`
	TokenType    string `json:"token_type"` // "Bearer",
	ExpiresIn    uint32 `json:"expires_in"` // 3600
	RefreshToken string `json:"refresh_token"`
	Scope        string `json:"scope"`
}

func GetRefreshToken(clientID string, oauthToken string, redirectURI string) (refreshTokenResponse *RefreshTokenResponse, err error) {

	// Get a refresh token
	// https://docs.moneybutton.com/docs/api-oauth-endpoints.html#requesting-the-refresh-token

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	reqBody := strings.NewReader(`grant_type=authorization_code&client_id=` + clientID + `&code=` + authToken + `&redirect_uri=` + redirectURI)
	postReq, err := http.NewRequestWithContext(context.Background(), http.MethodPost, config.OauthURL+"token", reqBody)
	if err != nil {
		return "", err
	}

	// Set the header on the post request
	postReq.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	// Do the request
	var resp *http.Response
	resp, err = http.DefaultClient.Do(postReq)
	if err != nil {
		return "", err
	}
	defer func() {
		_ = resp.Body.Close()
	}()

	if resp.StatusCode != http.StatusOK {
		return "", Error("Unexpected status code" + resp.StatusCode)
	}

	// Read the body
	var body []byte
	if body, err = ioutil.ReadAll(resp.Body); err != nil {
		return "", err
	}

	// Create the response
	refreshTokenResponse := new(RefreshTokenResponse)
	if err = json.Unmarshal(body, &refreshTokenResponse); err != nil {
		return "", err
	}

}
